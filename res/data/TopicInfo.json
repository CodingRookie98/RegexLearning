{
    "topicInfoArray": [
        {
            "id": 1,
            "title": "介绍",
            "text": "Understand? OK or NOT",
            "description": "Regex 是正则表达式（Regular Expression）的简称。它便于匹配、查找和管理文本。请在输入框中键入 `OK`，开始第一步以了解更多的细节。",
            "answer": "OK"
        },
        {
            "id": 2,
            "title": "什么是「正则表达式」？",
            "description": "正则表达式是表示搜索模式的字符串，常缩写成 `Regex` 或 `Regexp`。它常用于查找和替换文本中的字词。此外，我们可以测试文本是否符合我们设置的规则。\n\n 例如，您只想查找文件名列表中，扩展名是 `pdf` 的文件，那您只需跟着输入 `^\\w+\\.pdf$` 就可以找到。随着课程的进行，表达式的含义会变得更加清晰。",
            "text": [
                "readme.md",
                "document.pdf",
                "image.png",
                "music.mp4",
                "manual.pdf"
            ],
            "answer": "^\\w+\\.pdf$"
        },
        {
            "id": 3,
            "title": "基本匹配",
            "description": "我们想要查找的字符或单词可以直接输入，就像搜索一样。例如，要找出文本中的 `curious` 一词，只需输入同样的内容。",
            "text": [
                "I have no special talents. I am only passionately curious.",
                "― Albert Einstein"
            ],
            "answer": "curious"
        },
        {
            "id": 4,
            "title": "点 `.`：任何字符",
            "description": "`.` 允许匹配任何字符，包括特殊字符和空格。",
            "text": "abcABC123 .:!?",
            "answer": "."
        },
        {
            "id": 5,
            "title": "字符集 `[abc]`",
            "description": "如果一个词中的字符可以是各种字符，我们就将所有的可选字符写进中括号 `[]` 中。例如，为了查找文本中的所有单词，我们需要编写表达式，在 `[]` 中相邻地输入字符 `a`、`e`、`i`、`o`、`u`。",
            "text": "bar ber bir bor bur",
            "answer": "b[aeiou]r"
        },
        {
            "id": 6,
            "title": "否定字符集 `[^abc]`",
            "description": "为了查找下方文本的所有单词（`ber` 和 `bor` 除外），请在 `[]` 中的 `^` 后面并排输入 `e` 和 `o`。",
            "text": "bar ber bir bor bur",
            "answer": "b[^eo]r"
        },
        {
            "id": 7,
            "title": "字母范围 `[a-z]`",
            "description": "为了查找指定范围的字母，我们需要将起始字母和结束字母写进 `[]` 中，中间用连字符 `-` 分隔。它区分大小写。请编写表达式，匹配 `e` 和 `o` 之间所有的小写字母，包括它们本身。",
            "text": "abcdefghijklmnopqrstuvwxyz",
            "answer": "[e-o]"
        },
        {
            "id": 8,
            "title": "数字范围 `[0-9]`",
            "description": "为了查找指定范围的数字，我们需要在 `[]` 中输入起始和结束数字，中间用连字符 `-` 分隔。请编写表达式，匹配 `3` 到 `6` 之间的所有数字，包括它们本身。",
            "text": "0123456789",
            "answer": "[3-6]"
        },
        {
            "id": 9,
            "title": "练习：基本匹配",
            "description": "请编写表达式，匹配文本中的单词 `of`。",
            "text": [
                "“Every man takes the limits of his own field of vision for the limits of the world.”",
                "― Arthur Schopenhauer"
            ],
            "answer": "of"
        },
        {
            "id": 10,
            "title": "练习：匹配任意字符",
            "description": "请编写表达式，匹配文本中所有字母、数字、空格和特殊字符。表达式必须匹配任何字符。",
            "text": "az AZ 09 _- = !? ., :;",
            "answer": "."
        },
        {
            "id": 11,
            "title": "练习：字符集",
            "description": "写出匹配文本中所有单词的表达式。单词首字母是唯一变化的字符。",
            "text": "beer deer feer",
            "answer": "[bdf]eer"
        },
        {
            "id": 12,
            "title": "练习：否定字符集",
            "description": "请编写表达式，匹配除 `beor` 和 `beur` 以外的所有单词。要求使用否定字符集完成。",
            "text": "bear beor beer beur",
            "answer": "be[^ou]r"
        },
        {
            "id": 13,
            "title": "练习：字母范围",
            "description": "请编写表达式，匹配 `g` 到 `k` 之间的所有字母，包括它们本身。",
            "text": "abcdefghijklmnopqrstuvwxyz",
            "answer": "[g-k]"
        },
        {
            "id": 14,
            "title": "练习：数字范围",
            "description": "请编写表达式，匹配 `2` 到 `7` 之间的所有数字，包括它们本身。",
            "text": "0123456789",
            "answer": "[2-7]"
        },
        {
            "id": 15,
            "title": "星号 *",
            "description": "我们在字符后面加上 `*`，表示一个字符完全不匹配或可以匹配多次。例如，表示字母 `e` 在下方文本中不出现，只出现 1 次或者并排出现多次。",
            "text": "br ber beer",
            "answer": "be*r"
        },
        {
            "id": 16,
            "title": "加号 `+`",
            "description": "为了表示一个字符可以出现一次或多次，我们将 `+` 放在它后面。例如，表示 `e` 在下方文本中出现一次或多次。",
            "text": "br ber beer",
            "answer": "be+r"
        },
        {
            "id": 17,
            "title": "问号 `?`",
            "description": "为了表示一个字符是可选的，我们在它后面加一个 `?`。例如，表示下方文本中的字母 `u` 是可选的。",
            "text": "color, colour",
            "answer": "colou?r"
        },
        {
            "id": 18,
            "title": "大括号 - 1",
            "description": "为了表示一个字符出现的确切次数，我们在该字符的末尾，将它出现的次数写进大括号 `{}` 中，如 `{n}`。例如，表示下方文本中的字母 `e` 只能出现 `2` 次。",
            "text": "ber beer beeer beeeer",
            "answer": "be{2}r"
        },
        {
            "id": 22,
            "title": "大括号 - 2",
            "description": "为了表示一个字符至少出现多少次，我们在该字符的末尾，将它至少应出现的次数写进大括号 `{}` 中，并在数字后面加上逗号 `,`，如 `{n, }`。例如，表示下方文本中的字母 `e` 至少出现 `3` 次。",
            "text": "ber beer beeer beeeer",
            "answer": "be{3,}r"
        },
        {
            "id": 23,
            "title": "大括号 - 3",
            "description": "为了表示一些字符出现的次数在某个数字范围内，我们在该字符的末尾，将它至少和至多出现的次数写进大括号 `{}` 中，中间用逗号 `,` 分隔，如 `{x,y}`。例如，匹配下方文本中，字母 `e` 出现 `1` 至 `3` 次的单词。",
            "text": "ber beer beeer beeeer",
            "answer": "be{1,3}r"
        },
        {
            "id": 25,
            "title": "练习：星号 `*`",
            "description": "请编写表达式，用 `*` 匹配下方文本中，没有或存在多个字母 `e` 的单词。",
            "text": "dp dep deep",
            "answer": "de*p"
        },
        {
            "id": 26,
            "title": "练习：加号 `+`",
            "description": "请编写表达式，用 `+` 匹配下方文本中，字母 `e` 出现一次或多次的单词。",
            "text": "dp dep deep",
            "answer": "de+p"
        },
        {
            "id": 27,
            "title": "练习：问号 `?`",
            "description": "请编写表达式，用 `?` 表示字母 `n` 在文本中是可选的，使 `a` 和 `an` 都可以匹配到。",
            "text": "a, an",
            "answer": "an?"
        },
        {
            "id": 28,
            "title": "练习：大括号 - 1",
            "description": "用 `{}` 编写表达式，匹配文本中的 `4` 位阿拉伯数字。",
            "text": "Release 10/9/2021",
            "answer": "[0-9]{4}"
        },
        {
            "id": 29,
            "title": "练习：大括号 - 2",
            "description": "用 `{}` 编写表达式，匹配文本中，位数至少为 `2` 的阿拉伯数字。",
            "text": "Release 10/9/2021",
            "answer": "[0-9]{2,}"
        },
        {
            "id": 30,
            "title": "练习：大括号 - 3",
            "description": "用 `{}` 编写表达式，匹配文本中，位数为 `1` 至 `4` 的阿拉伯数字。",
            "text": "Release 10/9/2021",
            "answer": "[0-9]{1,4}"
        },
        {
            "id": 31,
            "title": "括号 `( )`: 分组",
            "description": "我们可以对一个表达式进行分组，并用这些分组来引用或执行一些规则。为了给表达式分组，我们需要将文本包裹在 `()` 中。现在，请尝试为下方文本中的 `haa` 构造分组。",
            "text": "ha-ha,haa-haa",
            "answer": "(haa)"
        },
        {
            "id": 32,
            "title": "引用组",
            "description": "单词 `ha` 和 `haa` 分组如下。第一组用 `\\1` 来避免重复书写。这里的 `1` 表示分组的顺序。请在表达式的末尾键入 `\\2` 以引用第二组。",
            "text": "ha-ha,haa-haa",
            "answer": "(ha)-\\1,(haa)-\\2"
        },
        {
            "id": 33,
            "title": "括号 `(?: )`: 非捕获分组",
            "description": "您可以对表达式进行分组，并确保它不被引用捕获。例如，下面有两个分组，但我们用 `\\1` 引用的第一个组实际上是指向第二个组，因为第一个是未被捕获的分组。",
            "text": "ha-ha,haa-haa",
            "answer": "(?:ha)-ha,(haa)-\\1"
        },
        {
            "id": 34,
            "title": "竖线 `|`",
            "description": "竖线允许一个表达式包含多个不同的分支。所有分支用 `|` 分隔。和在字符层面上运作的字符集 `[abc]` 不同，分支在表达式层面上运作。例如，下面的表达式同时匹配 `cat` 和 `rat`。请在末尾添加另一个 `|`，并输入 `dog` 以匹配所有单词。",
            "text": "cat rat dog",
            "answer": "(c|r)at|dog"
        },
        {
            "id": 35,
            "title": "转义字符 `\\`",
            "description": "在书写正则表达式时，我们会用到 `{ } [ ] / \\ + * . $^ | ?` 这些特殊字符 。为了匹配这些特殊字符本身，我们需要通过 `\\` 将它们转义。例如，要匹配文本中的 `.` 和 `*`，我们需要在它们前面添加一个 `\\`。",
            "text": "(*) Asterisk.",
            "answer": "(\\*|\\.)"
        },
        {
            "id": 36,
            "title": "插入符 `^`:\\n匹配字符串的开始",
            "description": "我们用 `[0-9]` 查找数字，若仅查找行首的数字，请在表达式前面加上 `^`。",
            "text": [
                "Basic Omellette Recipe",
                "1. 3 eggs, beaten",
                "2. 1 tsp sunflower oil",
                "3. 1 tsp butter"
            ],
            "answer": "^[0-9]"
        },
        {
            "id": 37,
            "title": "美元符号 `$`:\\n匹配字符串的结束",
            "description": "让我们在 `html` 的后面添加 `$`，来查找仅在行末出现的 `html`。",
            "text": [
                "https://domain.com/what-is-html.html",
                "https://otherdomain.com/html-elements",
                "https://website.com/html5-features.html"
            ],
            "answer": "html$"
        },
        {
            "id": 38,
            "title": "单词字符 `\\w`: 字母、数字和下划线",
            "description": "表达式 `\\w` 用于查找字母、数字和下划线。让我们用表达式 `\\w` 来查找文本中的单词字符。",
            "text": "abcABC123 _.:!?",
            "answer": "\\w"
        },
        {
            "id": 39,
            "title": "非单词字符 `\\W`",
            "description": "`\\W` 匹配除字母、数字和下划线之外的字符。",
            "text": "abcABC123 _.:!?",
            "answer": "\\W"
        },
        {
            "id": 40,
            "title": "数字字符 `\\d`",
            "description": "`\\d` 仅用来匹配数字。",
            "text": "abcABC123 .:!?",
            "answer": "\\d"
        },
        {
            "id": 41,
            "title": "非数字字符 `\\D`",
            "description": "`\\D` 匹配除数字之外的字符。",
            "text": "abcABC123 .:!?",
            "answer": "\\D"
        },
        {
            "id": 42,
            "title": "空白符 `\\s`",
            "description": "`\\s` 仅匹配空白字符。",
            "text": "abcABC123 .:!?",
            "answer": "\\s"
        },
        {
            "id": 43,
            "title": "非空白符 `\\S`",
            "description": "`\\S` 匹配除空白符之外的字符。",
            "text": "abcABC123 .:!?",
            "answer": "\\S"
        },
        {
            "id": 44,
            "title": "正向先行断言: `(?=)`",
            "description": "例如，我们要匹配文本中的小时值。为了只匹配后面有 `PM` 的数值，我们需要在表达式后面使用正向先行断言 `(?=)`，并在括号内的 `=` 后面添加 `PM`。",
            "text": "Date: 4 Aug 3PM",
            "answer": "\\d+(?=PM)"
        },
        {
            "id": 45,
            "title": "负向先行断言: `(?!)`",
            "description": "例如，我们要在文本中匹配除小时值以外的数字。我们需要在表达式后面使用负向先行断言 `(?!)`，并在括号内的 `!` 后面添加 `PM`，从而只匹配没有 `PM` 的数值。",
            "text": "Date: 4 Aug 3PM",
            "answer": "\\d+(?!PM)"
        },
        {
            "id": 46,
            "title": "正向后行断言: `(?\u003c=)`",
            "description": "例如，我们要匹配文本中的金额数。为了只匹配前面带有 `$` 的数字。我们要在表达式前面使用正向后行断言 `(?\u003c=)`，并在括号内的 `=` 后面添加 `\\$`。",
            "text": "Product Code: 1064 Price: $5",
            "answer": "(?<=\\$)\\d+"
        },
        {
            "id": 47,
            "title": "负向后行断言: `(?\u0026lt;!)`",
            "description": "例如，我们要在文本中匹配除价格外的数字。为了只匹配前面没有 `$` 的数字，我们要在表达式前用负向后行断言 `(?\u0026lt;!)`，并在括号内的 `!` 后面添加 `\\$`。",
            "text": "Product Code: 1064 Price: $5",
            "answer": "(?<!\\$)\\d+"
        },
        {
            "id": 48,
            "title": "贪婪匹配",
            "description": "正则表达式默认执行贪婪匹配。这意味着匹配内容会尽可能长。请看下面的示例，它匹配任何以 `r` 结尾的字符串，以及前面带有该字符串的文本，但它不会在第一个 `r` 处停止匹配。",
            "text": "ber beer beeer beeeer",
            "answer": ".*r"
        },
        {
            "id": 49,
            "title": "懒惰匹配",
            "description": "与贪婪匹配不同，懒惰匹配在第一次匹配时停止。下面的例子中，在 `*` 之后添加 `?`，将查找以 `r` 结尾且前面带有任意字符的第一个匹配项。这意味着本次匹配将会在第一个字母 `r` 处停止。",
            "text": "ber beer beeer beeeer",
            "answer": ".*?r"
        }
    ]
}
