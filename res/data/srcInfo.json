{
    "messages": {
        "section.learn.title": "学习",
        "section.learn.content": "`正则表达式`，即 Regular Expressions，缩写为 Regex 或 Regexp，是在正则表达式语法框架内创建的字符串。您可以用正则表达式轻松管理数据，执行查找、匹配或编辑等命令。正则表达式适用于 Python、SQL、JavaScript、R、Google Analytics、Google Data Studio 等编程语言和整个编程过程。现在，就通过 RegexLearn 的教程和示例，在线学习正则表达式吧。",
        "section.learn.imageAltText": "山峰上有一面旗帜的插图。",
        "section.cheatsheet.button": "立即查看",
        "section.cheatsheet.title": "备忘单",
        "section.cheatsheet.content": "通过 RegexLearn 的 `备忘单`，您可以一次性看到所需的所有正则表达式用法，并直接在一个页面上检查它们。使用备忘单来探索正则表达式的所有模式和符号吧。",
        "section.cheatsheet.imageAltText": "一个人通过双筒望远镜查看页面的插图。",
        "section.playground.title": "游乐场",
        "section.playground.content": "如果想要生成正则表达式，您可以通过游乐场轻松构建和测试您的正则表达式模式。作为测试者，您可以验证正则表达式，并在团队协作中与其他人共享。",
        "section.playground.imageAltText": "一只猫即将掉下一个完整的玻璃杯的插图。",
        "section.practice.title": "练习",
        "section.practice.content": "如果您已经完成了学习部分，那么是时候开始练习了！在练习环节，您可以检测您的正则表达式知识，并做作相应水平的练习。",
        "section.practice.imageAltText": "一个女人从一本书做笔记的插图。",
        "section.opensource.title": "开源",
        "section.opensource.content": "Regex Learn 是一个开源项目，欢迎社区贡献和免费使用。参与这个项目可以帮助您磨炼技能、学习和协作。您可以点击这里，贡献和支持本项目。",
        "section.opensource.imageAltText": "一个女人、一个男人和一只猫拼图的插图。",
        "examples.starter.title": "练习",
        "examples.starter.description": "现在是时候做一些练习来巩固我们学到的知识了。",
        "examples.finish.title": "练习已完成！",
        "examples.finish.description": " ",
        "steps.starter.title": "介绍",
        "steps.starter.description": "Regex 是正则表达式（Regular Expression）的简称。它便于匹配、查找和管理文本。请在输入框中键入 `OK`，开始第一步以了解更多的细节。",
        "steps.whatIsRegex.title": "什么是「正则表达式」？",
        "steps.whatIsRegex.description": "正则表达式是表示搜索模式的字符串，常缩写成 `Regex` 或 `Regexp`。它常用于查找和替换文本中的字词。此外，我们可以测试文本是否符合我们设置的规则。\\n\\n 例如，您只想查找文件名列表中，扩展名是 `pdf` 的文件，那您只需跟着输入 `^\\w+\\.pdf$` 就可以找到。随着课程的进行，表达式的含义会变得更加清晰。",
        "steps.basicMatchers.title": "基本匹配",
        "steps.basicMatchers.description": "我们想要查找的字符或单词可以直接输入，就像搜索一样。例如，要找出文本中的 `curious` 一词，只需输入同样的内容。",
        "steps.dotCharacter.title": "点 `.`：任何字符",
        "steps.dotCharacter.description": "`.` 允许匹配任何字符，包括特殊字符和空格。",
        "steps.characterSet.title": "字符集 `[abc]`",
        "steps.characterSet.description": "如果一个词中的字符可以是各种字符，我们就将所有的可选字符写进中括号 `[]` 中。例如，为了查找文本中的所有单词，我们需要编写表达式，在 `[]` 中相邻地输入字符 `a`、`e`、`i`、`o`、`u`。",
        "steps.negatedCharacterSet.title": "否定字符集 `[^abc]`",
        "steps.negatedCharacterSet.description": "为了查找下方文本的所有单词（`ber` 和 `bor` 除外），请在 `[]` 中的 `^` 后面并排输入 `e` 和 `o`。",
        "steps.range.title": "字母范围 `[a-z]`",
        "steps.range.description": "为了查找指定范围的字母，我们需要将起始字母和结束字母写进 `[]` 中，中间用连字符 `-` 分隔。它区分大小写。请编写表达式，匹配 `e` 和 `o` 之间所有的小写字母，包括它们本身。",
        "steps.rangeNumber.title": "数字范围 `[0-9]`",
        "steps.rangeNumber.description": "为了查找指定范围的数字，我们需要在 `[]` 中输入起始和结束数字，中间用连字符 `-` 分隔。请编写表达式，匹配 `3` 到 `6` 之间的所有数字，包括它们本身。",
        "examples.basicMatchers.title": "练习：基本匹配",
        "examples.basicMatchers.description": "请编写表达式，匹配文本中的单词 `of`。",
        "examples.dotCharacter.title": "练习：匹配任意字符",
        "examples.dotCharacter.description": "请编写表达式，匹配文本中所有字母、数字、空格和特殊字符。表达式必须匹配任何字符。",
        "examples.characterSet.title": "练习：字符集",
        "examples.characterSet.description": "写出匹配文本中所有单词的表达式。单词首字母是唯一变化的字符。",
        "examples.negatedCharacterSet.title": "练习：否定字符集",
        "examples.negatedCharacterSet.description": "请编写表达式，匹配除 `beor` 和 `beur` 以外的所有单词。要求使用否定字符集完成。",
        "examples.range.title": "练习：字母范围",
        "examples.range.description": "请编写表达式，匹配 `g` 到 `k` 之间的所有字母，包括它们本身。",
        "examples.rangeNumber.title": "练习：数字范围",
        "examples.rangeNumber.description": "请编写表达式，匹配 `2` 到 `7` 之间的所有数字，包括它们本身。",
        "steps.repetitions.title": "重复",
        "steps.repetitions.description": "一些特殊字符用来指定一个字符在文本中重复的次数。它们分别是加号 `+`、星号 `*` 和问号 `?`。",
        "steps.asterisk.title": "星号 `*`",
        "steps.asterisk.description": "我们在字符后面加上 `*`，表示一个字符完全不匹配或可以匹配多次。例如，表示字母 `e` 在下方文本中不出现，只出现 `1` 次或者并排出现多次。",
        "steps.plusCharacter.title": "加号 `+`",
        "steps.plusCharacter.description": "为了表示一个字符可以出现一次或多次，我们将 `+` 放在它后面。例如，表示 `e` 在下方文本中出现一次或多次。",
        "steps.questionMark.title": "问号 `?`",
        "steps.questionMark.description": "为了表示一个字符是可选的，我们在它后面加一个 `?`。例如，表示下方文本中的字母 `u` 是可选的。",
        "steps.quantifier.title": "大括号 - 1",
        "steps.quantifier.description": "为了表示一个字符出现的确切次数，我们在该字符的末尾，将它出现的次数写进大括号 `{}` 中，如 `{n}`。例如，表示下方文本中的字母 `e` 只能出现 `2` 次。",
        "steps.quantifierMin.title": "大括号 - 2",
        "steps.quantifierMin.description": "为了表示一个字符至少出现多少次，我们在该字符的末尾，将它至少应出现的次数写进大括号 `{}` 中，并在数字后面加上逗号 `,`，如 `{n, }`。例如，表示下方文本中的字母 `e` 至少出现 `3` 次。",
        "steps.quantifierRange.title": "大括号 - 3",
        "steps.quantifierRange.description": "为了表示一些字符出现的次数在某个数字范围内，我们在该字符的末尾，将它至少和至多出现的次数写进大括号 `{}` 中，中间用逗号 `,` 分隔，如 `{x,y}`。例如，匹配下方文本中，字母 `e` 出现 `1` 至 `3` 次的单词。",
        "examples.asterisk.title": "练习：星号 `*`",
        "examples.asterisk.description": "请编写表达式，用 `*` 匹配下方文本中，没有或存在多个字母 `e` 的单词。",
        "examples.plusCharacter.title": "练习：加号 `+`",
        "examples.plusCharacter.description": "请编写表达式，用 `+` 匹配下方文本中，字母 `e` 出现一次或多次的单词。",
        "examples.questionMark.title": "练习：问号 `?`",
        "examples.questionMark.description": "请编写表达式，用 `?` 表示字母 `n` 在文本中是可选的，使 `a` 和 `an` 都可以匹配到。",
        "examples.quantifier.title": "练习：大括号 - 1",
        "examples.quantifier.description": "用 `{}` 编写表达式，匹配文本中的 `4` 位阿拉伯数字。",
        "examples.quantifierMin.title": "练习：大括号 - 2",
        "examples.quantifierMin.description": "用 `{}` 编写表达式，匹配文本中，位数至少为 `2` 的阿拉伯数字。",
        "examples.quantifierRange.title": "练习：大括号 - 3",
        "examples.quantifierRange.description": "用 `{}` 编写表达式，匹配文本中，位数为 `1` 至 `4` 的阿拉伯数字。",
        "steps.grouping.title": "括号 `( )`: 分组",
        "steps.grouping.description": "我们可以对一个表达式进行分组，并用这些分组来引用或执行一些规则。为了给表达式分组，我们需要将文本包裹在 `()` 中。现在，请尝试为下方文本中的 `haa` 构造分组。",
        "steps.groupReference.title": "引用组",
        "steps.groupReference.description": "单词 `ha` 和 `haa` 分组如下。第一组用 `\\1` 来避免重复书写。这里的 `1` 表示分组的顺序。请在表达式的末尾键入 `\\2` 以引用第二组。",
        "steps.nonCapturingGrouping.title": "括号 `(?: )`: 非捕获分组",
        "steps.nonCapturingGrouping.description": "您可以对表达式进行分组，并确保它不被引用捕获。例如，下面有两个分组，但我们用 `\\1` 引用的第一个组实际上是指向第二个组，因为第一个是未被捕获的分组。",
        "steps.pipeCharacter.title": "竖线 `|`",
        "steps.pipeCharacter.description": "竖线允许一个表达式包含多个不同的分支。所有分支用 `|` 分隔。和在字符层面上运作的字符集 `[abc]` 不同，分支在表达式层面上运作。例如，下面的表达式同时匹配 `cat` 和 `rat`。请在末尾添加另一个 `|`，并输入 `dog` 以匹配所有单词。",
        "steps.escapeCharacter.title": "转义字符 `\\`",
        "steps.escapeCharacter.description": "在书写正则表达式时，我们会用到 `{ } [ ] / \\ + * . $^ | ?` 这些特殊字符 。为了匹配这些特殊字符本身，我们需要通过 `\\` 将它们转义。例如，要匹配文本中的 `.` 和 `*`，我们需要在它们前面添加一个 `\\`。",
        "steps.caret.title": "插入符 `^`:\\n匹配字符串的开始",
        "steps.caret.description": "我们用 `[0-9]` 查找数字，若仅查找行首的数字，请在表达式前面加上 `^`。",
        "steps.dollar.title": "美元符号 `$`:\\n匹配字符串的结束",
        "steps.dollar.description": "让我们在 `html` 的后面添加 `$`，来查找仅在行末出现的 `html`。",
        "steps.wordCharacter.title": "单词字符 `\\w`: 字母、数字和下划线",
        "steps.wordCharacter.description": "表达式 `\\w` 用于查找字母、数字和下划线。让我们用表达式 `\\w` 来查找文本中的单词字符。",
        "steps.withoutWordCharacter.title": "非单词字符 `\\W`",
        "steps.withoutWordCharacter.description": "`\\W` 匹配除字母、数字和下划线之外的字符。",
        "steps.numberCharacter.title": "数字字符 `\\d`",
        "steps.numberCharacter.description": "`\\d` 仅用来匹配数字。",
        "steps.withoutNumberCharacter.title": "非数字字符 `\\D`",
        "steps.withoutNumberCharacter.description": "`\\D` 匹配除数字之外的字符。",
        "steps.spaceCharacter.title": "空白符 `\\s`",
        "steps.spaceCharacter.description": "`\\s` 仅匹配空白字符。",
        "steps.withoutSpaceCharacter.title": "非空白符 `\\S`",
        "steps.withoutSpaceCharacter.description": "`\\S` 匹配除空白符之外的字符。",
        "steps.lookarounds.title": "零宽断言",
        "steps.lookarounds.description": "如果我们希望正在写的词语出现在另一个词语之前或之后，我们需要使用「零宽断言」。请前往下一步骤，学习如何使用「零宽断言」。",
        "steps.positiveLookahead.title": "正向先行断言: `(?=)`",
        "steps.positiveLookahead.description": "例如，我们要匹配文本中的小时值。为了只匹配后面有 `PM` 的数值，我们需要在表达式后面使用正向先行断言 `(?=)`，并在括号内的 `=` 后面添加 `PM`。",
        "steps.negativeLookahead.title": "负向先行断言: `(?!)`",
        "steps.negativeLookahead.description": "例如，我们要在文本中匹配除小时值以外的数字。我们需要在表达式后面使用负向先行断言 `(?!)`，并在括号内的 `!` 后面添加 `PM`，从而只匹配没有 `PM` 的数值。",
        "steps.positiveLookbehind.title": "正向后行断言: `(?\u003c=)`",
        "steps.positiveLookbehind.description": "例如，我们要匹配文本中的金额数。为了只匹配前面带有 `$` 的数字。我们要在表达式前面使用正向后行断言 `(?\u003c=)`，并在括号内的 `=` 后面添加 `\\$`。",
        "steps.negativeLookbehind.title": "负向后行断言: `(?\u0026lt;!)`",
        "steps.negativeLookbehind.description": "例如，我们要在文本中匹配除价格外的数字。为了只匹配前面没有 `$` 的数字，我们要在表达式前用负向后行断言 `(?\u0026lt;!)`，并在括号内的 `!` 后面添加 `\\$`。",
        "steps.flags.title": "标志",
        "steps.flags.description": "标志改变表达式的输出。这就是标志也称为 `修饰符` 的原因。标志决定表达式是否将文本视作单独的行处理，是否区分大小写，或者是否查找所有匹配项。请继续下一步步骤以学习标志。",
        "steps.flagsGlobal.title": "全局标志",
        "steps.flagsGlobal.description": "全局标志使表达式选中所有匹配项，如果不启用全局标志，那么表达式只会匹配第一个匹配项。现在，请启用全局标志，以便匹配所有匹配项。",
        "steps.flagsMultiline.title": "多行标志",
        "steps.flagsMultiline.description": "正则表达式将所有文本视作一行。但如果我们使用了多行标志，它就会单独处理每一行。这次，我们将根据每一行行末的规律来写出表达式，现在，请启用多行标志来查找所有匹配项。",
        "steps.flagsCaseInsensitive.title": "忽略大小写标志",
        "steps.flagsCaseInsensitive.description": "为了使我们编写的表达式不再大小写敏感，我们必须启用 `不区分大小写` 标志。",
        "steps.greedyMatching.title": "贪婪匹配",
        "steps.greedyMatching.description": "正则表达式默认执行贪婪匹配。这意味着匹配内容会尽可能长。请看下面的示例，它匹配任何以 `r` 结尾的字符串，以及前面带有该字符串的文本，但它不会在第一个 `r` 处停止匹配。",
        "steps.lazyMatching.title": "懒惰匹配",
        "steps.lazyMatching.description": "与贪婪匹配不同，懒惰匹配在第一次匹配时停止。下面的例子中，在 `*` 之后添加 `?`，将查找以 `r` 结尾且前面带有任意字符的第一个匹配项。这意味着本次匹配将会在第一个字母 `r` 处停止。",
        "steps.completeAllSteps.title": "恭喜，您已完成所有步骤！",
        "steps.completeAllSteps.description": "您可以随时返回到前面的步骤，并且可以轻松浏览所有已通过的步骤。",
        "lessons.regex101.title": "Regex 101 - ZH-CN",
        "lessons.regex101.description": "您可以在本教程中学习 Regex 的基础知识。 ",
        "lessons.regexForSeo.title": "Regex for SEO - ZH-CN",
        "lessons.regexForSeo.description": "在本教程中，您可以了解如何以及在何处使用 Regex 进行 SEO。",
        "lesson.regexForSeo.starter.title": "用于SEO的Regex",
        "lesson.regexForSeo.starter.description": "Regex 是一组在许多领域中经常使用的正则表达式，尤其是被那些想提高生产力的人使用。使用正则表达式进行 SEO 的好处是，能够更加容易的分析大数据和编写更丰富的过滤器。如果你是正则表达式新手，我们建议从 `Regex 101` 教程开始学习。 \\n\\n 请在正则表达式输入框中输入 `OK`开始开始第一步以了解更多的细节。",
        "lesson.regexForSeo.usage.title": "使用案例",
        "lesson.regexForSeo.usage.description": "你可以在 `Google Analytics`, `Google Data Studio`, `Google Sheets`, `Google Search Console`, `Ahrefs`, `Deepcrawl`, `Screaming Frog` 等平台上使用正则表达式进行SEO。它也经常用于 `.htaccess` 和 `robots.txt (类似于正则表达式的语法)` 文件中。\\n\\n下面是一个正则表达式样本，将只选择列表中以 `Google` 开头的文本。",
        "lesson.regexForSeo.basics.title": "基础知识",
        "lesson.regexForSeo.basics.description": "让我们来看一些你经常会使用的正则表达式。我们建议你回顾 `Regex 101` 教程以了解更多相关的信息。请输入`Yes`开始",
        "lesson.regexForSeo.or.title": "或 运算符 `|`",
        "lesson.regexForSeo.or.description": "我们使用 `|` 运算符来过滤多个表达式。例如，过滤含有 `seo` 和 `regex` 的表达式，写下这两个单词，用 `|` 运算符将它们分开。",
        "lesson.regexForSeo.optional.title": "可选 运算符 `?`",
        "lesson.regexForSeo.optional.description": "我们用它来表达一个表达式或字符是可选的。例如，我们想过滤同时包含 `http` 和 `https` 的文本。我们可以使用 或 操作符 `|` 来进行这个操作，但是对于这两个几乎相同的单词，有一个更好的方法。\\n\\n在这个例子中，字母 `s` 是可选的. 因此，在字母 `s` 的后面加上一个问号 `?` ",
        "lesson.regexForSeo.any.title": "任何 `.*`",
        "lesson.regexForSeo.any.description": "在正则表达式中，点 `.` 可以匹配任何东西，包括空格。 但使用它只能匹配单个字符。星号字符 `*` 的意思是匹配它前面的表达式零次或者多次。当同时使用两个字符的时候，会匹配无限长的字符。\\n\\n下面是各种关键词。在正则表达式的末尾添加 `.*` 来匹配以 `how to write` 开头的表达式，并匹配后面的所有内容。",
        "lesson.regexForSeo.contains.title": "包含",
        "lesson.regexForSeo.contains.description": "为了过滤包含我们要找的单词或短语的文本，我们在两个 `.*` 之间写上我们要查找的字段，以匹配所有的内容。例如，输入`.*buy.*`来过滤包括 `buy` 的内容。",
        "lesson.regexForSeo.negated.title": "否定字符集 `[^abc]`",
        "lesson.regexForSeo.negated.description": "我们使用否定的字符集 `[^]` 来表示我们不希望包括的字符。把不希望被包含的字符写在方括号里，并且在开头加上这个符号。下面有 `http` 和 `https`。由于 `http` 出现在两者中，所以 `https` 也会被选中，在字母 `p` 后面输入 `[^s]` 以排除字母`s`。",
        "lesson.regexForSeo.caret.title": "开始位置符号 `^`",
        "lesson.regexForSeo.caret.description": "假设我们有一个 URL 的列表, 我们只想找到那些以 `http` 开头的URL。但是除了开头之外，URL还在不同的部分包含`http`。因此，在下面的表达式的开头添加一个符号 `^`，以便过滤出那些只以 `http` 开头的网址。",
        "lesson.regexForSeo.dollarAndEscape.title": "美元符号 `$` 和转义字符 `\\`",
        "lesson.regexForSeo.dollarAndEscape.description": "我们有另外一个URL的列表。我们只想找到那些以 `.htm` 结尾的URL。\\n\\n因为点 `.` 是一个特殊字符，可以匹配一切字符，我们首先需要使用转义字符 `\\` 禁用 `htm` 前面的点。这适用于所有的特殊字符。\\n\\n然后在表达式的末尾添加一个 `$` 符号。这可以确保匹配结尾的文本。",
        "lesson.regexForSeo.limitation.title": "长度限制 `{n}`",
        "lesson.regexForSeo.limitation.description": "我们可能想通过字符长度来过滤结果。例如，要过滤长度为`35`个字符的URL，请在点 `.` 的后面用大括号输入你想匹配的长度数字 `{35}`。",
        "lesson.regexForSeo.maxLimitation.title": "长度限制（最大值） `{n,m}`",
        "lesson.regexForSeo.maxLimitation.description": "要过滤最大长度为 `35` 个字符的URL，请在点 `.` 的后面使用大括号，输入要使用的最大值和最小值 `{1,35}`。",
        "lesson.regexForSeo.minLimitation.title": "长度限制（最小值） `{n,}`",
        "lesson.regexForSeo.minLimitation.description": "要过滤最小长度为`35`个字符的URL，请输入`{35,}`，在点的末尾使用大括号，并以逗号结束，我们将使用这个值作为最小长度。",
        "lesson.regexForSeo.robots.title": "robots.txt (类似于正则表达式的语法)",
        "lesson.regexForSeo.robots.description": "下面是一个在`robots.txt`文件中使用正则表达式的例子。这个例子说明，机器人不应该抓取扩展名为 `pdf` 的链接。",
        "lesson.regexForSeo.htaccess.title": ".htaccess",
        "lesson.regexForSeo.htaccess.description": "下面是一个在 `.htaccess` 文件中使用正则表达式的例子。在这个例子中，`php` 扩展链接指向具有 `301` 返回码的 `html` 扩展。",
        "lesson.regexForSeo.outro.title": "结束语",
        "lesson.regexForSeo.outro.description": "正则知识是一种技能，可以在任何允许你使用正则表达式的平台上提高生产力。一旦你开始使用它并提高这项技能，它将帮助你更快地完成许多重复性任务，并为其他事情节省时间。为了更好地了解正则表达式的基础知识，你可以访问`Regex 101`教程。你可以使用 `游乐场` 页面在文本段落上测试你的正则表达式。"
    }
}
